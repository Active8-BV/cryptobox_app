// Generated by CoffeeScript 1.6.3
var add_output, assert, fs, path, print, run_cba_main,
  __slice = [].slice;

fs = require("fs");

assert = require('assert');

path = require("path");

add_output = function(msgs) {
  console.log(msgs);
  return true;
};

print = function() {
  var len_others, msg, others;
  msg = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  len_others = _.size(others);
  switch (len_others) {
    case 0:
      return add_output(msg);
    case 1:
      return add_output(msg + " " + others[0]);
    case 2:
      return add_output(msg + " " + others[0] + " " + others[1]);
    case 3:
      return add_output(msg + " " + others[0] + " " + others[1] + " " + others[2]);
    case 4:
      return add_output(msg + " " + others[0] + " " + others[1] + " " + others[2] + " " + others[3]);
    case 5:
      return add_output(msg + " " + others[0] + " " + others[1] + " " + others[2] + " " + others[3] + " " + others[4]);
    default:
      add_output(others);
      return add_output(msg);
  }
};

run_cba_main = function(name, options, cb, cb_stdout) {
  var buffereddata, cba_main, cmd_to_run, error, execution_done, g_cba_main, output, params, stdout_data;
  if (!exist(cb)) {
    throw "run_cba_main needs a cb parameter (callback)";
  }
  params = option_to_array(name, options);
  cmd_to_run = path.join(process.cwd(), "commands");
  cmd_to_run = path.join(cmd_to_run, "cba_main");
  cba_main = child_process.spawn(cmd_to_run, params);
  g_cba_main = cba_main;
  output = "";
  error = "";
  buffereddata = "";
  stdout_data = function(data) {
    var g_error_message, try_cb;
    if (String(data).indexOf("error_message") >= 0) {
      error = parse_json(data);
      g_error_message = error != null ? error.error_message : void 0;
      add_output(g_error_message);
    }
    if (cb_stdout != null) {
      buffereddata += data;
      buffereddata = String(buffereddata).split("\n");
      try_cb = function(datachunk) {
        if (datachunk != null) {
          if (_.size(datachunk) > 0) {
            datachunk = parse_json(datachunk);
            if (datachunk != null) {
              buffereddata = "";
              return cb_stdout(datachunk);
            }
          }
        }
      };
      return _.each(buffereddata, try_cb);
    } else {
      return output += data;
    }
  };
  cba_main.stdout.on("data", stdout_data);
  cba_main.stderr.on("data", function(data) {
    return error += data;
  });
  execution_done = function(event) {
    var errorm, g_error_message;
    g_cba_main = null;
    if (already_running(output)) {
      print("cryptobox.cf:220", "already running");
      return cb(false, output);
    } else {
      if (_.size(error) > 0) {
        if (String(error).indexOf("error_message") >= 0) {
          errorm = parse_json(error);
          g_error_message = errorm.error_message;
        }
        return cb(false, error);
      } else {
        output = parse_json(output);
        if (event > 0) {
          return cb(false, output);
        } else {
          return cb(true, output);
        }
      }
    }
  };
  return cba_main.on("exit", execution_done);
};

print("hello");
