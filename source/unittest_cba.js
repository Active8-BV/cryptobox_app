// Generated by CoffeeScript 1.6.3
var assert, check_result, fs, path, run_command, run_commands;

fs = require("fs");

assert = require('assert');

path = require("path");

run_command = function(name, data) {
  var cmd_folder, cmd_path, fout, result_path;
  data["id"] = new Date().getTime();
  cmd_folder = path.join(process.cwd(), "cba_commands");
  if (!fs.existsSync(cmd_folder)) {
    fs.mkdirSync(cmd_folder);
  }
  cmd_path = path.join(cmd_folder, name + ".cmd");
  result_path = path.join(cmd_folder, name + ".result");
  fout = fs.openSync(cmd_path, "w");
  fs.write(fout, JSON.stringify(data));
  return data["id"];
};

check_result = function(name, id) {
  var cmd_folder, data, result_path;
  cmd_folder = path.join(process.cwd(), "cba_commands");
  result_path = path.join(cmd_folder, name + ".result");
  if (fs.existsSync(result_path)) {
    data = fs.readFileSync(result_path);
    data = JSON.parse(data);
    fs.unlinkSync(result_path);
    if (data != null) {
      if ((data["result"] != null) && (data["id"] != null)) {
        if (data["id"] === id) {
          return data["result"];
        }
      }
    }
  }
  return null;
};

run_commands = function() {
  var proc, spawn;
  spawn = require("child_process").spawn;
  return proc = spawn("/Users/rabshakeh/workspace/cryptobox/cryptobox_app/source/run_commands.py", "");
};

exports["test add command"] = function() {
  var check_results, cmd_folder, cmd_id, cmd_path, name, obj, result_path,
    _this = this;
  name = "add";
  cmd_folder = path.join(process.cwd(), "cba_commands");
  cmd_path = path.join(cmd_folder, name + ".cmd");
  result_path = path.join(cmd_folder, name + ".result");
  obj = {};
  obj["a"] = 7;
  obj["b"] = 9;
  cmd_id = run_command(name, obj);
  assert.equal(fs.existsSync(cmd_path), true);
  run_commands();
  check_results = function() {
    var result;
    assert.equal(fs.existsSync(result_path), true);
    assert.equal(fs.existsSync(cmd_path), false);
    result = check_result(name, cmd_id);
    return assert.equal(result["result"], 16);
  };
  return setTimeout(check_results, 200);
};
