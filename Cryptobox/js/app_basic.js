// Generated by CoffeeScript 1.6.3
"use strict";
var BrowserDetect, GUID, asciistring, asciistring_lowercase, asciistring_lowercase_nospace, asciistring_no_specials, async_call, async_call_retries, b64_decode_safe, b64_encode_safe, b64_object_safe, b64_uri, b64safe, base64_decode, base64_encode, bool_parse, directive_check_slow_timeout, directive_check_timeout, emit_event, endswith, exist, exist_string, exist_truth, g_format_file_size, g_http_error, g_running_local, get_local_time, init_cryptobox, init_utils, instr, ismobile, load_save_object_cache, object_b64_safe, once_cb_init, once_load_save_object_cache, once_utils_init, other_with, param_unused, pass, pg, print, running_local, safe_b64, start_time, startswith, strcmp, translate, unique_number, uri_b64, warning,
  __slice = [].slice,
  _this = this,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

g_running_local = null;

directive_check_timeout = 100;

directive_check_slow_timeout = 1000;

translate = function(k) {
  return k;
};

exist_string = function(value) {
  if (value != null) {
    switch (value) {
      case void 0:
      case null:
      case "null":
      case "undefined":
        return false;
      default:
        return true;
    }
  } else {
    return false;
  }
};

exist = function(value) {
  if (exist_string(value)) {
    if (value === "") {
      return false;
    }
    if (String(value) === "NaN") {
      return false;
    }
    if (String(value) === "undefined") {
      return false;
    }
    if (value.trim != null) {
      if (value.trim() === "") {
        return false;
      }
    }
    return true;
  } else {
    return false;
  }
};

pg = function(v) {
  var print_key;
  if (exist(v)) {
    if (exist(window.globals[v])) {
      if (typeof console !== "undefined" && console !== null) {
        console.log(v, window.globals[v]);
      }
    } else {
      print_key = function(k) {
        if (String(k).toLowerCase().indexOf(v.toLowerCase()) >= 0) {
          if (typeof console !== "undefined" && console !== null) {
            console.log(v, "->", k, " -> ", window.globals[k]);
          }
        }
        if (String(window.globals[k]).toLowerCase().indexOf(v.toLowerCase()) >= 0) {
          return typeof console !== "undefined" && console !== null ? console.log(v, "->", k, " -> ", window.globals[k]) : void 0;
        }
      };
      _.each(_.keys(window.globals), print_key);
    }
  } else {
    print_key = function(k) {
      return typeof console !== "undefined" && console !== null ? console.log(k, window.globals[k]) : void 0;
    };
    _.each(_.keys(window.globals), print_key);
  }
  return "";
};

param_unused = function(param) {
  return param;
};

instr = function(astring, val) {
  return String(astring).indexOf(val) !== -1;
};

startswith = function(astring, val) {
  return String(astring).indexOf(val) === 0;
};

endswith = function(astring, val) {
  return astring.indexOf(val, astring.length - val.length) !== -1;
};

async_call = function(func) {
  return setTimeout(func, directive_check_timeout);
};

if (window.btoa != null) {
  base64_encode = window.btoa;
} else {
  base64_encode = window.base64.encode;
}

if (window.atob != null) {
  base64_decode = window.atob;
} else {
  base64_decode = window.base64.decode;
}

if (!String.prototype.trim) {
  String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, "");
  };
}

String.prototype.startsWith = function(suffix) {
  return this.indexOf(suffix) === 0;
};

String.prototype.endsWith = function(suffix) {
  return this.indexOf(suffix, this.length - suffix.length) !== -1;
};

String.prototype.contains = function(substr) {
  return this.indexOf(substr) !== -1;
};

Array.prototype.remove = function(from, to) {
  var rest;
  rest = this.slice((to || from) + 1 || this.length);
  this.length = (from < 0 ? this.length + from : from);
  return this.push.apply(this, rest);
};

uri_b64 = function(s) {
  s = encodeURI(s);
  return base64_encode(s);
};

safe_b64 = function(s) {
  s = encodeURI(s);
  s = base64_encode(s);
  return s;
};

strcmp = function(s1, s2) {
  if (!exist_string(s1)) {
    return false;
  }
  if (!exist_string(s2)) {
    return false;
  }
  if (exist(s1.trim)) {
    s1 = s1.trim();
  }
  if (exist(s2.trim)) {
    s2 = s2.trim();
  }
  return s1 === s2;
};

exist_truth = function(value) {
  if (exist(value)) {
    switch (value) {
      case "0":
      case 0:
        return false;
      case "1":
      case 1:
        return true;
      case "false":
      case false:
        return false;
      case "true":
      case true:
        return true;
      default:
        warning("app_basic.cf:153", "exist_truth neither true or false", value);
        return false;
    }
  } else {
    return false;
  }
};

b64safe = "data:b64encode:safe,";

b64_encode_safe = function(s) {
  if (!exist(s)) {
    return s;
  }
  if (!exist(s.indexOf)) {
    return s;
  }
  if (s.indexOf(b64safe) === 0) {
    return s;
  }
  s = encodeURIComponent(s);
  s = base64_encode(s);
  s = s.replace(/\=/g, "-");
  return b64safe + s;
};

b64_decode_safe = function(s) {
  var error;
  if (!exist(s)) {
    return s;
  }
  if (!exist(s.indexOf)) {
    return s;
  }
  if (s.indexOf(b64safe) !== 0) {
    return s;
  }
  s = s.replace(b64safe, "");
  s = s.replace(/-/g, "=");
  s = base64_decode(s);
  try {
    s = decodeURIComponent(s);
  } catch (_error) {
    error = _error;
    s = "error decoding";
  }
  return s;
};

object_b64_safe = function(v) {
  var set_var;
  set_var = function(k) {
    return v[k] = object_b64_safe(v[k]);
  };
  if (_.isObject(v)) {
    _.each(_.keys(v), set_var);
    return v;
  } else {
    v = b64_encode_safe(v);
    return v;
  }
};

b64_object_safe = function(v) {
  var set_var;
  set_var = function(k) {
    return v[k] = b64_object_safe(v[k]);
  };
  if (_.isObject(v)) {
    _.each(_.keys(v), set_var);
    return v;
  } else {
    v = b64_decode_safe(v);
    return v;
  }
};

b64_uri = function(s) {
  s = base64_decode(s);
  return decodeURI(s);
};

pass = true;

asciistring = function(s) {
  var ns, testchar;
  ns = "";
  testchar = function(c) {
    var code;
    code = c.charCodeAt(0);
    switch (true) {
      case code >= 48 && code <= 57:
        return ns += c;
      case code >= 65 && code <= 90:
        return ns += c;
      case code >= 97 && code <= 122:
        return ns += c;
      case code === 32:
        return ns += c;
      case code === 45:
        return ns += c;
      case code === 38:
        return ns += c;
      case code === 47:
        return ns += c;
      case code === 43:
        return ns += c;
      case code === 8364:
        return ns += "â‚¬";
      default:
        print("app_basic.cf:262", "ascii stripped", c, code);
        return pass;
    }
  };
  _.each(s, testchar);
  return ns;
};

asciistring_no_specials = function(s) {
  var ns, testchar;
  ns = "";
  testchar = function(c) {
    var code;
    code = c.charCodeAt(0);
    switch (true) {
      case code >= 48 && code <= 57:
        return ns += c;
      case code >= 65 && code <= 90:
        return ns += c;
      case code >= 97 && code <= 122:
        return ns += c;
      case code === 32:
        return ns += c;
      case code === 45:
        return ns += c;
      case code === 38:
        return ns += c;
      case code === 43:
        return ns += c;
      case code === 214:
        return ns += "O";
      case code === 214:
        return ns += "O";
      case code === 246:
        return ns += "o";
      case code === 47:
        return ns += c;
      case code === 8364:
        return ns += "EUR ";
      default:
        return ns += "";
    }
  };
  _.each(s, testchar);
  if (ns != null) {
    return ns;
  } else {
    return "";
  }
};

asciistring_lowercase = function(s) {
  var ns;
  ns = "";
  s = s.toLowerCase();
  return asciistring(s);
};

asciistring_lowercase_nospace = function(s) {
  var ns, stripspace;
  s = asciistring_no_specials(s);
  ns = "";
  stripspace = function(i) {
    if (i !== ' ') {
      return ns += i;
    }
  };
  _.each(s, stripspace);
  return ns;
};

g_format_file_size = function(bytes) {
  if (bytes === 0) {
    return "-";
  }
  if (typeof bytes !== "number") {
    bytes = parseFloat(bytes);
  }
  if (bytes >= Math.pow(2, 30)) {
    return (bytes / Math.pow(2, 30)).toFixed(2) + " gb";
  }
  if (bytes >= Math.pow(2, 20)) {
    return (bytes / Math.pow(2, 20)).toFixed(2) + " mb";
  }
  if (bytes >= Math.pow(2, 10)) {
    return (bytes / Math.pow(2, 10)).toFixed(2) + " kb";
  }
  return bytes.toFixed(0) + " b.";
};

GUID = function() {
  var S4;
  S4 = function() {
    return Math.floor(Math.random() * 0x10000).toString(16);
  };
  return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
};

get_local_time = function() {
  return new Date().getTime();
};

unique_number = function() {
  if (running_local) {
    return new Date().getTime();
  } else {
    return 7;
  }
};

window.cvar_show_debug_info = false;

other_with = {};

window.g_logfile = [];

start_time = get_local_time();

print = function() {
  var cnt, coffee2cf, create_print_string, found_object, loop_others, msg, num_objects, obj, others, others2, others_length, print_str, shortdate, spaces, _base, _base1, _base2, _base3;
  msg = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  if (!exist(window.globals)) {
    if (typeof console !== "undefined" && console !== null) {
      console.log(msg, others);
    }
    return;
  }
  if (exist(window.globals["g_browser"])) {
    if (window.globals["g_browser"].browser === 'Chrome') {
      switch (_.size(others)) {
        case 0:
          if (typeof console !== "undefined" && console !== null) {
            console.log("%c" + msg, 'color: crimson', others);
          }
          break;
        case 1:
          if (typeof console !== "undefined" && console !== null) {
            console.log("%c" + msg, 'color: crimson', others[0]);
          }
          break;
        case 2:
          if ((typeof (_base = String(others[0])).indexOf === "function" ? _base.indexOf(".cf") : void 0) > 0) {
            if (typeof console !== "undefined" && console !== null) {
              console.log("%c" + msg + " " + others[0], 'color: crimson', others[1]);
            }
          } else {
            if (typeof console !== "undefined" && console !== null) {
              console.log("%c" + msg, 'color: crimson', others[0], others[1]);
            }
          }
          break;
        case 3:
          if ((typeof (_base1 = String(others[0])).indexOf === "function" ? _base1.indexOf(".cf") : void 0) > 0) {
            if (typeof console !== "undefined" && console !== null) {
              console.log("%c" + msg + " " + others[0], 'color: crimson', others[1], others[2]);
            }
          } else {
            if (typeof console !== "undefined" && console !== null) {
              console.log("%c" + msg, 'color: crimson', others[0], others[1], others[2]);
            }
          }
          break;
        case 4:
          if ((typeof (_base2 = String(others[0])).indexOf === "function" ? _base2.indexOf(".cf") : void 0) > 0) {
            if (typeof console !== "undefined" && console !== null) {
              console.log("%c" + msg + " " + others[0], 'color: crimson', others[1], others[2], others[3]);
            }
          } else {
            if (typeof console !== "undefined" && console !== null) {
              console.log("%c" + msg, 'color: crimson', others[0], others[1], others[2], others[3]);
            }
          }
          break;
        case 5:
          if ((typeof (_base3 = String(others[0])).indexOf === "function" ? _base3.indexOf(".cf") : void 0) > 0) {
            if (typeof console !== "undefined" && console !== null) {
              console.log("%c" + msg + " " + others[0], 'color: crimson', others[1], others[2], others[3], others[4]);
            }
          } else {
            if (typeof console !== "undefined" && console !== null) {
              console.log("%c" + msg, 'color: crimson', others[0], others[1], others[2], others[3], others[4]);
            }
          }
          break;
        default:
          if (typeof console !== "undefined" && console !== null) {
            console.log(others, msg);
          }
      }
    } else {
      switch (_.size(others)) {
        case 0:
          if (typeof console !== "undefined" && console !== null) {
            console.log(msg);
          }
          break;
        case 1:
          if (typeof console !== "undefined" && console !== null) {
            console.log(msg + " " + others[0]);
          }
          break;
        case 2:
          if (typeof console !== "undefined" && console !== null) {
            console.log(msg + " " + others[0] + " " + others[1]);
          }
          break;
        case 3:
          if (typeof console !== "undefined" && console !== null) {
            console.log(msg + " " + others[0] + " " + others[1] + " " + others[2]);
          }
          break;
        case 4:
          if (typeof console !== "undefined" && console !== null) {
            console.log(msg + " " + others[0] + " " + others[1] + " " + others[2] + " " + others[3]);
          }
          break;
        case 5:
          if (typeof console !== "undefined" && console !== null) {
            console.log(msg + " " + others[0] + " " + others[1] + " " + others[2] + " " + others[3] + " " + others[4]);
          }
          break;
        default:
          if (typeof console !== "undefined" && console !== null) {
            console.log(others, msg);
          }
      }
    }
  } else {
    if (typeof console !== "undefined" && console !== null) {
      console.log(msg, others);
    }
  }
  if (!exist_truth(window.cvar_show_debug_info)) {
    return;
  }
  if (msg.replace != null) {
    shortdate = "" + (get_local_time() - start_time) / 1000;
    while (shortdate.length < 6) {
      shortdate += " ";
    }
    shortdate += " ";
    while (msg.length < 22) {
      msg += " ";
    }
    msg = shortdate + msg;
    others2 = [];
    coffee2cf = function(obj) {
      if (obj != null) {
        if (obj.replace != null) {
          return obj.replace(".cf", ".cf");
        }
      }
      return obj;
    };
    others = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = others.length; _i < _len; _i++) {
        obj = others[_i];
        _results.push(coffee2cf(obj));
      }
      return _results;
    })();
    others_length = others.length;
    if (others != null) {
      cnt = 0;
      loop_others = function(i) {
        var l;
        if (exist(i)) {
          l = i.length;
        } else {
          l = "undefined".length;
        }
        if (other_with[cnt] != null) {
          if (other_with[cnt] < l) {
            other_with[cnt] = l + 2;
          }
        } else {
          other_with[cnt] = l + 2;
        }
        return cnt += 1;
      };
      _.each(others, loop_others);
      print_str = "";
      cnt = 0;
      spaces = function(n) {
        var c, s;
        c = 0;
        s = " ";
        while (c < n) {
          s += " ";
          c += 1;
        }
        return s;
      };
      found_object = -1;
      num_objects = 0;
      create_print_string = function(s) {
        if (_.isObject(s)) {
          found_object = cnt;
          num_objects += 1;
        } else {
          if (exist(s)) {
            print_str += s + spaces(other_with[cnt] - s.length);
          } else {
            print_str += s + " ";
          }
        }
        return cnt += 1;
      };
      _.each(others, create_print_string);
      if (found_object !== -1) {
        if (num_objects > 1) {
          window.g_logfile.push(msg);
        } else {
          window.g_logfile.push(msg + " " + print_str + " " + others[found_object]);
        }
      } else {
        window.g_logfile.push(msg + " " + print_str);
      }
    } else {
      window.g_logfile.push(msg + " " + String(others));
    }
    window.g_logfile = window.g_logfile.slice(_.size(window.g_logfile) - 150);
    return 1;
  }
};

warning = function() {
  var msg, others;
  msg = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  if (typeof console !== "undefined" && console !== null) {
    console.log('%c------ important ' + msg + ' ---------', 'color: red');
  }
  switch (_.size(others)) {
    case 0:
      if (typeof console !== "undefined" && console !== null) {
        console.log(others);
      }
      break;
    case 1:
      if (typeof console !== "undefined" && console !== null) {
        console.log(others[0], "\t\t");
      }
      break;
    case 2:
      if (typeof console !== "undefined" && console !== null) {
        console.log(others[0], others[1], "\t\t");
      }
      break;
    case 3:
      if (typeof console !== "undefined" && console !== null) {
        console.log(others[0], others[1], others[2], "\t\t");
      }
      break;
    case 4:
      if (typeof console !== "undefined" && console !== null) {
        console.log(others[0], others[1], others[2], others[3], "\t\t");
      }
      break;
    default:
      if (typeof console !== "undefined" && console !== null) {
        console.log(others);
      }
  }
  if (exist(console.trace)) {
    if (typeof console !== "undefined" && console !== null) {
      console.trace();
    }
  }
  return typeof console !== "undefined" && console !== null ? console.log('%c------------------------------------------------', 'color: red') : void 0;
};

async_call_retries = function(msg, func, retries) {
  if (retries > 30) {
    print("app_basic.cf:535", msg, "async_call_retries", retries);
  }
  if (retries > 20) {
    setTimeout(func, directive_check_slow_timeout);
  } else {
    setTimeout(func, directive_check_timeout);
  }
  if (retries > 50) {
    return print("app_basic.cf:543", "giving up", msg, "async_call_retries", retries);
  }
};

running_local = function() {
  var path_split;
  if (g_running_local != null) {
    return g_running_local;
  } else {
    path_split = document.location.hostname;
    if (path_split === "127.0.0.1" || path_split === "192.168.14.107") {
      print("app_basic.cf:553", "running local");
      return g_running_local = true;
    } else {
      return g_running_local = false;
    }
  }
};

g_http_error = function(data) {
  var traceback;
  if (data.indexOf == null) {
    if (data.data != null) {
      if (data.data.indexOf != null) {
        data = data.data;
      }
    }
  }
  if (data.indexOf != null) {
    traceback = data.slice(data.indexOf("Exception Type:"), data.indexOf("FILES:"));
    if (exist(traceback)) {
      warning("app_basic.cf:569", " **  django error  ** ", traceback);
      window.g_logfile.push(traceback);
    }
  } else {
    traceback = data;
    window.g_logfile.push(traceback);
    print("app_basic.cf:574", data);
  }
  return traceback;
};

ismobile = function() {
  if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {
    return true;
  } else {
    return false;
  }
};

BrowserDetect = {
  init: function() {
    this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
    this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";
    return this.OS = this.searchString(this.dataOS) || "an unknown OS";
  },
  searchString: function(data) {
    var dataProp, dataString, i;
    i = 0;
    while (i < data.length) {
      dataString = data[i].string;
      dataProp = data[i].prop;
      this.versionSearchString = data[i].versionSearch || data[i].identity;
      if (dataString) {
        if (dataString.indexOf(data[i].subString) !== -1) {
          return data[i].identity;
        }
      } else {
        if (dataProp) {
          return data[i].identity;
        }
      }
      i += 1;
    }
  },
  searchVersion: function(dataString) {
    var index;
    index = dataString.indexOf(this.versionSearchString);
    if (index === -1) {
      return;
    }
    return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));
  },
  dataBrowser: [
    {
      string: navigator.userAgent,
      subString: "Chrome",
      identity: "Chrome"
    }, {
      string: navigator.userAgent,
      subString: "OmniWeb",
      versionSearch: "OmniWeb/",
      identity: "OmniWeb"
    }, {
      string: navigator.vendor,
      subString: "Apple",
      identity: "Safari",
      versionSearch: "Version"
    }, {
      prop: window.opera,
      identity: "Opera",
      versionSearch: "Version"
    }, {
      string: navigator.vendor,
      subString: "iCab",
      identity: "iCab"
    }, {
      string: navigator.vendor,
      subString: "KDE",
      identity: "Konqueror"
    }, {
      string: navigator.userAgent,
      subString: "Firefox",
      identity: "Firefox"
    }, {
      string: navigator.vendor,
      subString: "Camino",
      identity: "Camino"
    }, {
      string: navigator.userAgent,
      subString: "Netscape",
      identity: "Netscape"
    }, {
      string: navigator.userAgent,
      subString: "MSIE",
      identity: "Explorer",
      versionSearch: "MSIE"
    }, {
      string: navigator.userAgent,
      subString: "Gecko",
      identity: "Mozilla",
      versionSearch: "rv"
    }, {
      string: navigator.userAgent,
      subString: "Mozilla",
      identity: "Netscape",
      versionSearch: "Mozilla"
    }
  ],
  dataOS: [
    {
      string: navigator.platform,
      subString: "Win",
      identity: "Windows"
    }, {
      string: navigator.platform,
      subString: "Mac",
      identity: "Mac"
    }, {
      string: navigator.userAgent,
      subString: "iPhone",
      identity: "iPhone/iPod"
    }, {
      string: navigator.platform,
      subString: "Linux",
      identity: "Linux"
    }
  ]
};

bool_parse = function(bs) {
  if (bs === "true") {
    return true;
  } else if (bs === "false") {
    return false;
  } else {
    return bs;
  }
};

emit_event = function(msg, scope, event) {
  scope.$emit(event);
  return scope.$broadcast(event);
};

load_save_object_cache = function(saveobject) {
  print("app_basic.cf:706", "loading caches");
  saveobject.load_cache("CryptoUser");
  saveobject.load_cache("UserCanRead");
  return saveobject.collection_maxed("SaveEvent", "10");
};

once_load_save_object_cache = _.once(load_save_object_cache);

init_cryptobox = function(cryptobox) {
  print("app_basic.cf:716", "init cryptobox");
  return cryptobox.init();
};

once_cb_init = _.once(init_cryptobox);

init_utils = function(utils) {
  print("app_basic.cf:724", "init utils");
  return utils.uinit();
};

once_utils_init = _.once(init_utils);

angular.module("cryptoboxApp.base", []).factory("memory", function($q) {
  var check_watch_vars, _set;
  window.globals = {};
  window.globals["g_first_tree_render"] = true;
  check_watch_vars = function(msg, k, v) {
    var check_watches, watches;
    return;
    watches = ["g_last_term"];
    check_watches = function(w) {
      if (strcmp(k, w)) {
        print("app_basic.cf:744", "memory", msg, k, v);
      }
      if (strcmp(msg, "del")) {
        return print("app_basic.cf:747", "delete");
      }
    };
    return _.each(watches, check_watches);
  };
  _set = function(key, value) {
    var error, kv;
    if (key.indexOf("cvar_") === 0) {
      key = key.replace("cvar_", "g_cvar_");
    }
    if (key.indexOf("c_") === 0) {
      key = key.replace("c_", "g_c_");
    }
    kv = key + ":" + value;
    if (key.indexOf("g_") === 0) {
      window.globals[key] = value;
      return;
    }
    error = "not g_" + key;
    print("app_basic.cf:764", error);
    return warning("app_basic.cf:765", error);
  };
  return {
    set: function(key, value) {
      var keep_warning,
        _this = this;
      check_watch_vars("set", key, value);
      if (!exist(key)) {
        warning("app_basic.cf:770", "no key given");
      }
      if (key.indexOf("g_ls_") === 0) {
        if (exist(localStorage)) {
          print("app_basic.cf:774", "set localstorage", key);
          localStorage[key] = value;
        }
      }
      if (key.indexOf("g_f_") === 0) {
        if (_.size(_.filter(_.keys(window.globals), function(k) {
          return strcmp(k, key);
        })) > 0) {
          if (!instr(document.location.pathname, "context.html")) {
            keep_warning = function() {
              return warning("app_basic.cf:781", key, "already exist as functional value");
            };
          }
          if (instr(document.location.pathname, "context.html")) {
            throw "already exist";
          }
        }
      }
      if (!exist(value)) {
        value = "";
      }
      return _set(key, value);
    },
    set_if_higher: function(key, value) {
      var cv;
      check_watch_vars("set_if_higher", key, value);
      cv = this.get(key);
      value = parseFloat(value);
      if (isNaN(value)) {
        throw "not a number";
      }
      if (exist(cv)) {
        if (cv < value) {
          return this.set(key, value);
        }
      } else {
        return this.set(key, value);
      }
    },
    critical_set: function(key, value) {
      check_watch_vars("critical_set", key, value);
      if (!exist(key)) {
        warning("app_basic.cf:807", "no key given");
      }
      if (!exist(value)) {
        throw new Error("critical set undefined value for key " + key);
      }
      return _set(key, value);
    },
    set_no_warning: function(key, value) {
      check_watch_vars("set_no_warning", key, value);
      return _set(key, value);
    },
    all_prefix: function(key_prefix) {
      var check, keys, result;
      keys = _.keys(window.globals);
      check = function(val) {
        var v;
        if (val.indexOf("g_cvar_") === 0) {
          v = val.replace("g_cvar_", "cvar_");
          if (v.indexOf(key_prefix) === 0) {
            return v;
          }
        }
        if (val.indexOf(key_prefix) === 0) {
          return val;
        }
      };
      result = _.filter(_.map(keys, check), function(val) {
        return val != null;
      });
      return result;
    },
    prefix: function(kp) {
      return this.all_prefix(kp);
    },
    del_prefix: function(kp) {
      var del_cache,
        _this = this;
      del_cache = function(key) {
        return _this.del(key);
      };
      return _.each(this.all_prefix(kp), del_cache);
    },
    exist: function(key) {
      if (!exist(key)) {
        return false;
      }
      if (!exist(this.get(key))) {
        return false;
      }
      return true;
    },
    has: function(key) {
      return this.exist(key);
    },
    get: function(key) {
      var error, val, value;
      val = null;
      check_watch_vars("get", key, "");
      if (!exist(key)) {
        warning("app_basic.cf:858", "no key given");
      }
      if (key.indexOf("cvar_") === 0) {
        key = key.replace("cvar_", "g_cvar_");
      }
      if (key.indexOf("c_") === 0) {
        key = key.replace("c_", "g_c_");
      }
      if (key.indexOf("g_") === 0) {
        value = window.globals[key];
        val = bool_parse(value);
      }
      if (!exist(val)) {
        if (key.indexOf("g_ls_") === 0) {
          if (exist(localStorage)) {
            print("app_basic.cf:873", "get localstorage", key);
            if (exist(localStorage[key])) {
              val = localStorage[key];
              window.globals[key] = val;
            }
          }
        }
      }
      if (exist(key)) {
        return val;
      }
      error = "globals g_ ->" + key;
      print("app_basic.cf:882", error);
      return warning("app_basic.cf:883", error);
    },
    get_int: function(key) {
      var val;
      val = this.get(key);
      return parseInt(val, 10);
    },
    get_float: function(key) {
      var val;
      val = this.get(key);
      return parseFloat(val);
    },
    set_one_read_value: function(key) {
      _set(key, true);
      return true;
    },
    get_one_read_value: function(key) {
      var val;
      val = this.get(key);
      this.del(key);
      if (exist(val)) {
        return true;
      }
      return false;
    },
    get_promise: function(key) {
      var p, val;
      p = $q.defer();
      val = this.get(key);
      if (val != null) {
        p.resolve(val);
      } else {
        p.reject("memory:get_promise no value for key [" + String(key) + "]");
      }
      return p.promise;
    },
    del: function(key) {
      var error;
      check_watch_vars("del", key, "");
      if (key.indexOf("cvar_") === 0) {
        key = key.replace("cvar_", "g_cvar_");
      }
      if (key.indexOf("c_") === 0) {
        key = key.replace("c_", "g_c_");
      }
      if (key.indexOf("g_") === 0) {
        delete window.globals[key];
        return;
      }
      error = "globals should start with g_ (global) - " + key;
      print("app_basic.cf:927", key, "no g_ prefix");
      return warning("app_basic.cf:928", error);
    },
    reset: function() {
      var cookie_key, keep, key, _i, _len, _ref, _results;
      _ref = _.keys(window.globals);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        keep = false;
        if (key.indexOf("g_service") === 0) {
          print("app_basic.cf:935", "stopping", key);
          clearInterval(window.globals[key]);
        }
        cookie_key = key;
        if (cookie_key.indexOf("g_c_") === 0) {
          cookie_key = cookie_key.replace("g_c_", "c_");
        }
        if (cookie_key.indexOf("c_") === 0) {
          if (cookie_key.indexOf("c_persist_") === 0) {
            keep = true;
          }
          if (cookie_key.indexOf("c_const_persist_") === 0) {
            keep = true;
          }
        }
        if (key.indexOf("g_persist_") === 0) {
          keep = true;
        }
        if (!keep) {
          _results.push(this.del(key));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    bool_test: function(key) {
      var val;
      val = this.get(key);
      if (!exist(val)) {
        this.set(key, false);
        val = false;
      }
      if (String(val) !== "true" && String(val) !== "false") {
        throw new Error("not a boolean");
      }
      return exist_truth(val);
    },
    counter: function(key) {
      check_watch_vars("counter", key, "");
      if (!exist(this.get(key))) {
        return this.set(key, 0);
      }
    },
    counter_create: function(key, val) {
      if (!exist(this.get(key))) {
        this.set(key, 0);
      }
      if (exist(val)) {
        return this.set(key, val);
      }
    },
    reset_counter: function(key) {
      if (!exist(this.get(key))) {
        this.set(key, 0);
      }
      return this.set(key, 0);
    },
    get_counter: function(key) {
      return this.get(key);
    },
    counter_get: function(key) {
      return this.get(key);
    },
    mod_counter: function(key, modulus) {
      var imod, ival, val;
      val = this.get(key);
      ival = parseInt(val, 10);
      imod = parseInt(modulus, 10);
      return (ival % imod) === 0;
    },
    increment_counter: function(key) {
      var val;
      val = this.get(key);
      if (!exist(val)) {
        val = 0;
      }
      val = parseInt(val, 10);
      val = val + 1;
      this.set(key, val);
      return val;
    },
    cnt_up: function(key) {
      return this.increment_counter(key);
    },
    decrement_counter: function(key) {
      var val;
      val = this.get(key);
      val = parseInt(val, 10);
      val = val - 1;
      this.set(key, val);
      return val;
    },
    cnt_down: function(key) {
      return this.decrement_counter(key);
    }
  };
}).factory("clientcookies", function(memory, utils) {
  var set_memory, _set;
  this.loaded = false;
  _set = function(key, value) {
    var error;
    if (key === "c_token") {
      warning("app_basic.cf:1028", "c_token not allowed");
    }
    if (key === "c_username") {
      warning("app_basic.cf:1031", "c_username not allowed");
    }
    if (key.indexOf("c_") === 0) {
      Store.set(key, value);
      return;
    }
    error = "cookies should start with c_";
    print("app_basic.cf:1038", error);
    return warning("app_basic.cf:1039", error);
  };
  set_memory = function(cookie) {
    if (cookie.key.indexOf("c_") === 0) {
      return memory.set(cookie.key, cookie.val);
    }
  };
  return {
    ensure_memory: function() {
      var cookie_data;
      if (!this.loaded) {
        cookie_data = Store.all();
        _.each(cookie_data, set_memory);
        return this.loaded = true;
      }
    },
    reset: function() {
      var check_delete,
        _this = this;
      check_delete = function(key) {
        var cookie_key, keep;
        keep = false;
        cookie_key = key;
        if (cookie_key.indexOf("g_c_") === 0) {
          cookie_key = cookie_key.replace("g_c_", "c_");
        }
        if (cookie_key.indexOf("c_") === 0) {
          if (cookie_key.indexOf("c_persist_") === 0) {
            keep = true;
          } else if (cookie_key.indexOf("c_const_persist_") === 0) {
            keep = true;
          }
        }
        if (!keep) {
          return _this.del(cookie_key);
        }
      };
      return _.each(_.keys(window.globals), check_delete);
    },
    del: function(key) {
      memory.del(key);
      return Store.del(key);
    },
    set: function(key, value) {
      if (key.indexOf("c_const_") === 0) {
        if (utils.exist(memory.get(key))) {
          print("app_basic.cf:1077", key + "is const", value, "ignored");
          return;
        }
      }
      memory.set(key, value);
      return _set(key, value);
    },
    set_no_warning: function(key, value) {
      memory.set(key, value);
      return _set(key, value);
    },
    get: function(key) {
      var error, value;
      if (key === "c_token") {
        warning("app_basic.cf:1088", "c_token not allowed");
      }
      if (key === "c_username") {
        warning("app_basic.cf:1091", "c_username not allowed");
      }
      if (key.indexOf("c_") !== 0) {
        error = "cookies should start with c_";
        warning("app_basic.cf:1095", error);
      }
      value = memory.get(key);
      value = bool_parse(value);
      if (value != null) {
        return value;
      }
      value = Store.get(key);
      if (utils.exist(value)) {
        value = bool_parse(value);
        memory.set(key, value);
        return value;
      }
      return null;
    },
    has: function(key) {
      var v;
      v = this.get(key);
      if (utils.exist(v)) {
        return true;
      }
      return false;
    }
  };
}).factory("utils", function(memory, dateFilter, $templateCache, $q, $http) {
  var init, m_browser, m_os, m_version;
  m_browser = null;
  m_os = null;
  m_version = null;
  init = function() {
    var browser;
    BrowserDetect.init();
    m_browser = BrowserDetect.browser;
    m_version = BrowserDetect.version;
    m_os = BrowserDetect.OS;
    browser = {};
    browser["browser"] = m_browser;
    browser["version"] = m_version;
    browser["os"] = m_os;
    memory.set("g_browser", browser);
    memory.set("g_location_origin", window.location.origin);
    if (m_browser === "Chrome") {
      return directive_check_timeout = 10;
    }
  };
  return {
    get_mini_mime: function(mime, name) {
      switch (mime) {
        case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        case "application/msword":
          return "word";
        case "application/pdf":
          return "acrobat";
        case "application/postscript":
          return "vector";
        case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
        case "application/vnd.ms-excel":
        case "application/vnd.oasis.opendocument.spreadsheet":
          return "excel";
        case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
        case "application/vnd.ms-powerpoint":
          return "powerpoint";
        case "image/png":
        case "image/gif":
        case "image/bmp":
        case "image/jpg":
        case "image/jpeg":
        case "image/vnd.adobe.photoshop":
        case "image/x-ms-bmp":
        case "image/x-photoshop":
        case "image/x-icon":
          return "picture";
        case "application/visio":
        case "application/x-visio":
        case "application/vnd.visio":
        case "application/visio.drawing":
        case "application/vsd":
        case "application/x-vsd":
        case "image/x-vsd":
        case "zz-application/zz-winassoc-vsd":
          return "visio";
        case "audio/mpeg":
          return "sound";
        case "application/bin":
        case "application/binary":
        case "application/com":
        case "application/dos-exe":
        case "application/exe":
        case "application/macbinary":
        case "application/msdos-windows":
        case "application/octet-stream":
        case "application/x-com":
        case "application/x-exe":
        case "application/x-macbinary":
        case "application/x-msdos-program":
        case "application/x-stuffit":
        case "application/x-tencore":
        case "application/x-winexe":
        case "application/x-zip-compressed":
        case "vms/exe":
        case "application/x-msdownload":
          return "application";
        case "application/zip":
        case "application/x-tar":
          return "compressed";
        case "folder":
          return "folder";
        case "text/x-python":
          return "code";
        case "application/javascript":
          return "js";
        case "text/x-java-source":
        case "text/x-java":
          return "code";
        case "text/x-c":
        case "text/x-csrc":
        case "text/x-c++src":
          if (name.indexOf(".cpp") > 0) {
            return "cplusplus";
          } else {
            return "c";
          }
          break;
        case "application/rtf":
          return "word";
        case "text/plain":
          if (name.indexOf(".note") > 0) {
            return "note";
          } else {
            return "text";
          }
          break;
        default:
          if (exist(mime)) {
            if (mime.indexOf("video/") > -1) {
              return "film";
            }
          }
          if (name.indexOf(".as") > 0) {
            return "actionscript";
          } else if (name.indexOf(".csv") > 0) {
            return "excel";
          } else if (name.indexOf(".numbers") > 0) {
            return "excel";
          } else if (name.indexOf(".css") > 0) {
            return "code";
          } else if (name.indexOf(".cs") > 0) {
            return "cplusplus";
          } else if (name.indexOf(".rb") > 0) {
            return "ruby";
          } else if (name.indexOf(".vsd") > 0) {
            return "visio";
          } else if (name.indexOf(".vdx") > 0) {
            return "visio";
          } else if (name.indexOf(".mkv") > 0) {
            return "film";
          } else if (name.indexOf(".php") > 0) {
            return "code";
          } else if (name.indexOf(".mp3") > 0) {
            return "sound";
          } else if (name.indexOf(".pkg") > 0) {
            return "compressed";
          } else if (name.indexOf(".dat") > 0) {
            return "compressed";
          } else if (name.indexOf(".md") > 0) {
            return "text";
          } else if (name.indexOf(".pages") > 0) {
            return "word";
          } else if (name.indexOf(".dmg") > 0) {
            return "compressed";
          } else if (name.indexOf(".rtfd") > 0) {
            return "text";
          } else if (name.indexOf(".txt") > 0) {
            return "text";
          } else if (name.indexOf(".html") > 0) {
            return "code";
          } else if (name.indexOf(".json") > 0) {
            return "code";
          } else if (name.indexOf(".htm") > 0) {
            return "code";
          } else if (name.indexOf(".ico") > 0) {
            return "image";
          } else if (name.indexOf(".eml") > 0) {
            return "default";
          } else if (name.indexOf(".ttf") > 0) {
            return "gear";
          } else if (name.indexOf(".epub") > 0) {
            return "pages";
          } else if (name.indexOf(".mobi") > 0) {
            return "pages";
          } else if (name.indexOf(".chtml") > 0) {
            return "code";
          } else if (name.indexOf(".chtml") > 0) {
            return "application";
          } else {
            print("app_basic.cf:1242", "unknown mimetype", name, mime);
            return "default";
          }
      }
    },
    match_mime_small_icon: function(mini_mime) {
      return "/st/img/icon-" + mini_mime + ".png";
    },
    match_mime_large_icon: function(mini_mime) {
      switch (mini_mime) {
        case "acrobat":
        case "cplusplus":
        case "actionscript":
        case "c":
        case "cplusplus":
        case "code":
        case "ruby":
        case "java":
        case "vector":
        case "compressed":
        case "powerpoint":
        case "text":
        case "word":
        case "excel":
        case "picture":
        case "note":
        case "film":
          return "/st/img/icon-" + mini_mime + "@4x.png";
        default:
          return "/st/img/icon-default@4x.png";
      }
    },
    get_local_time: function() {
      return get_local_time();
    },
    uinit: function() {
      print("app_basic.cf:1259", "init utils");
      return init();
    },
    reg_test: function(data, expr) {
      var patt;
      patt = new RegExp(expr);
      return patt.test(data);
    },
    chrome: function() {
      if (m_browser === "Chrome") {
        return true;
      }
      return false;
    },
    ie8: function() {
      if (m_browser === "Explorer") {
        if (parseInt(m_version, 10) === 8) {
          return true;
        }
      }
      return false;
    },
    html5: function() {
      var v;
      v = memory.get("g_c_html5mode");
      return bool_parse(v);
    },
    split: function(str, splitter) {
      var s, sp;
      s = String(str);
      sp = s.split(splitter);
      return sp;
    },
    splitlast: function(str, splitter) {
      var s, sp;
      s = String(str);
      sp = s.split(splitter);
      return sp[_.size(sp) - 1];
    },
    bool_parse: function(v) {
      return bool_parse(v);
    },
    text_html: function(str) {
      str = str.trim();
      return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/\n/g, "<br/>").replace(/\ /g, "&nbsp;").replace(/\t/g, "&nbsp;&nbsp;&nbsp;&nbsp;");
    },
    percentage: function(current, range) {
      var perc;
      current = parseFloat(current);
      range = parseFloat(range);
      perc = current / (range / 100);
      if (range === 0) {
        return 0;
      }
      if (perc > 100) {
        perc = 100;
      }
      if (isNaN(perc)) {
        return 0;
      }
      return parseInt(perc, 10);
    },
    full: function(arr) {
      if (_.size(arr) > 0) {
        return true;
      }
      return false;
    },
    empty: function(arr) {
      if (_.size(arr) === 0) {
        return true;
      }
      return false;
    },
    exclude: function(source, exclude) {
      var check, new_array,
        _this = this;
      new_array = [];
      check = function(item) {
        var check2, found;
        found = false;
        check2 = function(item2) {
          var check_key;
          check_key = function(key) {
            if (!_.isObject(item[key])) {
              if (String(item[key]) === String(item2[key])) {
                return found = true;
              }
            }
          };
          return _.each(_.keys(item2), check_key);
        };
        _.each(exclude, check2);
        if (!found) {
          return new_array.push(item);
        }
      };
      _.each(source, check);
      return new_array;
    },
    exclude_key: function(source, exclude, key) {
      var check, new_array;
      new_array = [];
      check = function(item) {
        var check2, found;
        found = false;
        check2 = function(item2) {
          if (String(item[key]) === String(item2[key])) {
            return found = true;
          }
        };
        _.each(exclude, check2);
        if (!found) {
          return new_array.push(item);
        }
      };
      _.each(source, check);
      return new_array;
    },
    exclude_key_key: function(source, exclude, key, key2) {
      var check, new_array;
      new_array = [];
      check = function(item) {
        var check2, found;
        found = false;
        check2 = function(item2) {
          if (String(item[key]) === String(item2[key2])) {
            return found = true;
          }
        };
        _.each(exclude, check2);
        if (!found) {
          return new_array.push(item);
        }
      };
      _.each(source, check);
      return new_array;
    },
    exclude_key_value: function(source, key, value) {
      var check, new_array;
      new_array = [];
      check = function(item) {
        var found;
        found = false;
        if (String(item[key]) === String(value)) {
          found = true;
        }
        if (!found) {
          return new_array.push(item);
        }
      };
      _.each(source, check);
      return new_array;
    },
    filter_key_value: function(source, key, value) {
      var check, new_array,
        _this = this;
      new_array = [];
      check = function(item) {
        var found, tmp;
        found = false;
        if (_.isObject(item)) {
          tmp = _this.filter_key_value(item, key, value);
          if (_.size(tmp) > 0) {
            found = true;
          }
        }
        if (item != null) {
          if (String(item[key]) === String(value)) {
            found = true;
          }
        }
        if (found) {
          return new_array.push(item);
        }
      };
      _.each(source, check);
      return new_array;
    },
    map_to_values: function(source, key) {
      var check, new_array,
        _this = this;
      new_array = [];
      check = function(item) {
        var found;
        found = false;
        if (_.isObject(item[key])) {
          return print("app_basic.cf:1415", _this.map_to_values(item, key));
        } else {
          if (exist(item[[key]])) {
            return new_array.push(item[key]);
          }
        }
      };
      _.each(source, check);
      return new_array;
    },
    unique_object_list: function(source, key) {
      var make_unique, new_array,
        _this = this;
      new_array = [];
      make_unique = function(item) {
        var check, found;
        found = false;
        check = function(item2) {
          if (item2[key] === item[key]) {
            return found = true;
          }
        };
        _.each(new_array, check);
        if (!found) {
          return new_array.push(item);
        }
      };
      _.each(source, make_unique);
      return new_array;
    },
    unique_list: function(source) {
      var make_unique, new_array,
        _this = this;
      new_array = [];
      make_unique = function(item) {
        var check, found;
        found = false;
        check = function(item2) {
          if (item2 === item) {
            return found = true;
          }
        };
        _.each(new_array, check);
        if (!found) {
          return new_array.push(item);
        }
      };
      _.each(source, make_unique);
      return new_array;
    },
    slugify: function(text) {
      text = text.toLowerCase();
      text = text.replace(/[^-a-zA-Z\/0-9,&\s]+/g, "");
      text = text.replace(/-/g, "_");
      text = text.replace(/\s/g, "_");
      while (text.indexOf("__") > 0) {
        text = text.replace("__", "_");
      }
      return text;
    },
    obj2json: function(obj) {
      return JSON.stringify(obj);
    },
    json2obj: function(json) {
      return JSON.parse(json);
    },
    obj2b64: function(obj) {
      return this.b64_encode_safe(this.obj2json(obj));
    },
    b642obj: function(b64) {
      if (!String(b64).contains("safe")) {
        warning("app_basic.cf:1475", "b642obj", "safe not found in string");
        return b64;
      }
      return this.json2obj(this.b64_decode_safe(b64));
    },
    same_object: function(obj1, obj2) {
      var j1, j2;
      j1 = this.obj2json(obj1);
      j2 = this.obj2json(obj2);
      return j1 === j2;
    },
    strcmp: function(s1, s2) {
      return strcmp(s1, s2);
    },
    b64_encode_safe: function(s) {
      return b64_encode_safe(s);
    },
    b64_decode_safe: function(s) {
      return b64_decode_safe(s);
    },
    object_b64_safe: function(v) {
      return object_b64_safe(v);
    },
    b64_object_safe: function(v) {
      return b64_object_safe(v);
    },
    b64_uri: function(s) {
      return b64_uri(s);
    },
    asciistring: function(s) {
      return asciistring(s);
    },
    asciistring_no_specials: function(s) {
      return asciistring_no_specials(s);
    },
    asciistring_lowercase: function(s) {
      return asciistring_lowercase(s);
    },
    format_file_size: function(bytes) {
      return g_format_file_size(bytes);
    },
    browser: function() {
      if (!this.exist(m_browser)) {
        init();
      }
      return m_browser;
    },
    is_phone: function() {
      if (memory.has("g_device_type")) {
        if (memory.get("g_device_type") === "phone") {
          return true;
        }
      }
      return false;
    },
    is_tablet: function() {
      if (memory.has("g_device_type")) {
        if (memory.get("g_device_type") === "tablet") {
          return true;
        }
      }
      return false;
    },
    is_desktop: function() {
      if (memory.has("g_device_type")) {
        if (memory.get("g_device_type") === "desktop") {
          return true;
        }
      }
      return false;
    },
    version: function() {
      if (!this.exist(m_version)) {
        init();
      }
      return m_version;
    },
    os: function() {
      if (!this.exist(m_os)) {
        init();
      }
      return m_os;
    },
    smooth_progress_update: function(hard_progress, smooth_progress) {
      var chance;
      if (this.ie8()) {
        return hard_progress;
      }
      if (hard_progress > 50) {
        if (smooth_progress < 20) {
          smooth_progress = 20;
        }
      }
      chance = 4;
      if (smooth_progress > 20) {
        chance = 500;
      }
      if (Math.round(chance * Math.random()) === 2) {
        smooth_progress += 1;
      }
      if (hard_progress > 98) {
        if (smooth_progress > 80) {
          if (hard_progress > 80) {
            smooth_progress += 20 * Math.random();
          } else {
            smooth_progress += 1;
          }
        } else if (smooth_progress > 60) {
          if (hard_progress > 60) {
            smooth_progress += 10 * Math.random();
          } else {
            smooth_progress += 2 * Math.random();
          }
        } else if (smooth_progress > 20) {
          if (hard_progress > 20) {
            smooth_progress += 10 * Math.random();
          } else {
            if (Math.round(chance * Math.random()) === 2) {
              smooth_progress += 10 * Math.random();
            } else {
              smooth_progress += 5 * Math.random();
            }
          }
        } else {
          smooth_progress += 2 * Math.random();
        }
      }
      if (smooth_progress > 100) {
        smooth_progress = 100;
      }
      if (hard_progress !== 100) {
        if (smooth_progress > 95) {
          smooth_progress = 95;
        }
      }
      return smooth_progress;
    },
    mail_admins: function(subject, message) {
      var command, data, p, url;
      p = $q.defer();
      data = {};
      data["subject"] = subject;
      data["message"] = message;
      command = "mailadmins";
      url = "/" + this.get_cryptobox_slug() + "/" + command + "/" + get_local_time();
      data = object_b64_safe(data);
      $http.post(url, data).then(function(succes) {
        return p.resolve();
      }, function(e) {
        print("app_basic.cf:1614", "error mailing admins");
        print("app_basic.cf:1615", e);
        return p.resolve();
      });
      return p.promise;
    },
    warning: function() {
      var add_error, add_errors, g_warnings, msg, others, spaces, warning_str, warnings;
      msg = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      warnings = [];
      warnings.push(msg);
      add_error = function(i) {
        return warnings.push(String(i));
      };
      _.each(others, add_error);
      warning("app_basic.cf:1627", msg, others);
      warning_str = "";
      spaces = "";
      add_errors = function(i) {
        warning_str += spaces + i + "\n";
        return spaces += "  ";
      };
      _.each(warnings, add_errors);
      this.mail_admins(this.get_cryptobox_slug() + " - javascript error", warning_str);
      return g_warnings = [];
    },
    digest: function() {
      return memory.critical_set("g_digest_requested", true);
    },
    force_digest: function(scope) {
      var digest,
        _this = this;
      if (!exist(scope)) {
        warning("app_basic.cf:1643", "force_digest needs a scope parameter");
      }
      digest = function() {
        if (!scope.$$phase) {
          return scope.$apply();
        }
      };
      return _.defer(digest);
    },
    sanitize_url: function(url) {
      url = "/" + url;
      while (url.indexOf("//") !== -1) {
        url = url.replace("//", "/");
      }
      return url;
    },
    trim_left: function(str, tv) {
      var subs;
      subs = str.substring(0, tv.length);
      if (subs === tv) {
        str = str.substring(tv.length, str.length);
      }
      return str;
    },
    strip_left: function(str, tv) {
      return this.trim_left(str, tv);
    },
    trim_right: function(str, tv) {
      var subs;
      subs = str.substring(str.length - tv.length);
      if (subs === tv) {
        str = str.substring(0, str.length - tv.length);
      }
      return str;
    },
    strip_right: function(str, tv) {
      return this.trim_right(str, tv);
    },
    trim: function(str, tv) {
      if (!exist(tv)) {
        tv = " ";
      }
      str = this.trim_left(str, tv);
      str = this.trim_right(str, tv);
      return str;
    },
    capfirst: function(s) {
      return s.charAt(0).toUpperCase() + s.toLowerCase().substring(1);
    },
    numbers_only_string: function(v) {
      var i, s, _i, _len, _ref;
      if (!exist(v)) {
        v = "";
      }
      v = v.trim();
      if (v === "") {
        return v;
      }
      s = "";
      for (_i = 0, _len = v.length; _i < _len; _i++) {
        i = v[_i];
        if (_ref = parseInt(i, 10), __indexOf.call([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], _ref) >= 0) {
          s += i;
        }
      }
      return s;
    },
    count: function(string, subString, allowOverlapping) {
      var n, pos, step;
      string += "";
      subString += "";
      if (subString.length <= 0) {
        return string.length + 1;
      }
      n = 0;
      pos = 0;
      step = (allowOverlapping ? 1. : subString.length);
      while (true) {
        pos = string.indexOf(subString, pos);
        if (pos >= 0) {
          n++;
          pos += step;
        } else {
          break;
        }
      }
      return n;
    },
    strip_file_extension: function(fname) {
      var cnt_points, extension, i, join_name, new_name, ret, split_name, _i, _ref;
      if (fname.indexOf(".") !== -1) {
        cnt_points = this.count(fname, ".");
        if (cnt_points > 1) {
          for (i = _i = 1, _ref = cnt_points - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
            fname = fname.replace(".", "Â±");
          }
        }
        split_name = fname.split(".");
        extension = split_name[split_name.length - 1];
        if (extension.indexOf(" ") !== -1) {
          return String(fname).trim();
        }
        split_name = split_name.slice(0, split_name.length - 1);
        new_name = "";
        join_name = function(i) {
          return new_name += i;
        };
        _.each(split_name, join_name);
        new_name = new_name.replace(/Â±/g, ".");
        ret = this.trim_right(new_name, ".");
        if (ret != null) {
          return ret;
        }
        return "";
      }
      return ret = this.trim_right(fname, " ");
    },
    file_extension: function(fname) {
      var cnt_points, extension, i, split_name, _i, _ref;
      if (fname.indexOf(".") !== -1) {
        cnt_points = this.count(fname, ".");
        if (cnt_points > 1) {
          for (i = _i = 1, _ref = cnt_points - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
            fname = fname.replace(".", "Â±");
          }
        }
        split_name = fname.split(".");
        extension = split_name[split_name.length - 1];
        if (extension.indexOf(" ") !== -1) {
          return fname;
        }
        if (_.size(extension) > 0) {
          return String(extension).trim();
        }
      }
      return String(fname).trim();
    },
    is_mobile: function() {
      return /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent);
    },
    title: function(title) {
      return document.title = this.get_cryptobox_slug() + " | " + title.toLowerCase();
    },
    exist_string: function(value) {
      return exist_string(value);
    },
    exist: function(value) {
      return exist(value);
    },
    assert: function(key, value) {
      if (!this.exist(value)) {
        return warning("app_basic.cf:1783", "value named " + key + " does not exist");
      }
    },
    exist_truth: function(value) {
      return exist_truth(value);
    },
    stripTrailingSlash: function(str) {
      while (str.substr(-1) === "/") {
        str = str.substr(0, str.length - 1);
      }
      return str;
    },
    strEndsWith: function(str, suffix) {
      return str.indexOf(suffix, str.length - suffix.length) !== -1;
    },
    get_cryptobox_slug: function() {
      " parse out the toplevel url, this == the slug ";
      var cryptobox_slug, path_split;
      cryptobox_slug = memory.get("g_cryptobox_slug");
      if (cryptobox_slug) {
        return cryptobox_slug;
      } else {
        path_split = document.location.pathname.split("/");
        cryptobox_slug = path_split[1];
        memory.set("g_cryptobox_slug", cryptobox_slug);
        return cryptobox_slug;
      }
    },
    format_date: function(date) {
      return dateFilter(date, 'EEEE d MMMM y');
    },
    format_time: function(date) {
      return dateFilter(date, 'H:mm:ss');
    },
    timestamp: function() {
      return this.format_time(this.get_local_time());
    },
    format_datetime_medium: function(date) {
      return dateFilter(date, 'd MMM y H:mm');
    },
    format_datetime_long: function(date) {
      var str;
      str = String(dateFilter(date, 'EEEE d MMMM y H:mm:ss'));
      if (str.contains("undefined")) {
        return date;
      } else if (str.contains("1970")) {
        return date;
      } else if (str.contains("NaN")) {
        return date;
      } else {
        return str;
      }
    },
    debug_mode: function() {
      var g_debugmode;
      g_debugmode = memory.get("g_debugmode");
      if (!this.exist(g_debugmode)) {
        memory.set("g_debugmode", running_local());
        g_debugmode = memory.get("g_debugmode");
      }
      return g_debugmode;
    },
    remove_cache: function() {
      if (this.debug_mode()) {
        return $templateCache.removeAll();
      }
    },
    md5: function(data) {
      return CryptoJS.MD5(data).toString();
    },
    sha3: function() {
      var append_data, data, hashdata;
      data = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      hashdata = "";
      append_data = function(d) {
        hashdata += String(d);
        return hashdata += "+";
      };
      _.each(data, append_data);
      hashdata = this.trim_right(hashdata, "+");
      return CryptoJS.SHA3(hashdata).toString();
    },
    http_get: function(url) {
      var p;
      print("app_basic.cf:1860", "http_get", url);
      p = $q.defer();
      $http.get(url).then(function(result) {
        return p.resolve(result.data);
      }, function(e) {
        return p.reject(g_http_error(e.data));
      });
      return p.promise;
    },
    http_get_cached: function(url) {
      var content, p, url_key;
      print("app_basic.cf:1873", "http_get_cached", url);
      url_key = asciistring_lowercase_nospace(url);
      p = $q.defer();
      content = memory.get("g_http_get_cached_" + url_key);
      if (exist(content)) {
        p.resolve(content);
      } else {
        $http.get(url).then(function(result) {
          memory.set("g_http_get_cached_" + url_key, result.data);
          return p.resolve(result.data);
        }, function(e) {
          return p.reject(g_http_error(e.data));
        });
      }
      return p.promise;
    },
    set_time_out: function(msg, func, delay, notify) {
      var func_md5;
      if (!exist(notify)) {
        notify = true;
      }
      if (notify) {
        func_md5 = this.md5(String(func));
        if (!memory.has("g_f_set_time_out" + func_md5)) {
          print("app_basic.cf:1899", msg, "utils.set_time_out", func_md5);
          memory.counter_create("g_f_set_time_out" + func_md5);
          memory.set("g_time_out_func_" + func_md5, msg);
        }
        memory.increment_counter("g_f_set_time_out" + func_md5);
        if (memory.mod_counter("g_f_set_time_out" + func_md5, 100)) {
          print("app_basic.cf:1907", memory.get("g_time_out_func_" + func_md5), "has a set_time_out which is called", memory.get("g_f_set_time_out" + func_md5), "times");
        }
      }
      return setTimeout(func, delay);
    },
    set_interval: function(msg, func, delay, descr) {
      if (!exist(descr)) {
        warning("app_basic.cf:1912", "set_interval needs a descr parameter");
      }
      print("app_basic.cf:1913", msg, "set_interval", descr, delay);
      return setInterval(func, delay);
    }
  };
}).factory("urls", function(utils, memory, clientcookies) {
  var _safe;
  _safe = function(parameter) {
    return safe_b64(parameter);
  };
  return {
    http_error: function(data) {
      return g_http_error(data);
    },
    make_route: function(path) {
      var cached_route, cryptobox_slug, new_path;
      cached_route = memory.get("g_" + path);
      if (cached_route != null) {
        return cached_route;
      }
      cryptobox_slug = utils.get_cryptobox_slug();
      if (clientcookies.get("c_html5mode")) {
        new_path = "/" + cryptobox_slug + "/" + path;
      } else {
        new_path = "/" + path;
      }
      new_path = new_path.replace(new RegExp("//", "g"), "/");
      memory.set("g_" + path, new_path);
      return new_path;
    },
    make_absolute_route: function(path) {
      var cached_route, cryptobox_slug, html5_mode, new_path;
      cached_route = memory.get("g_" + path);
      cryptobox_slug = utils.get_cryptobox_slug();
      if (memory.has("g_c_html5mode")) {
        html5_mode = memory.get("g_c_html5mode");
      } else {
        html5_mode = clientcookies.get("c_html5mode");
      }
      if (!html5_mode) {
        new_path = "/" + cryptobox_slug + "#/" + path;
      } else {
        new_path = "/" + cryptobox_slug + "/" + path;
      }
      new_path = new_path.replace(new RegExp("//", "g"), "/");
      memory.set("g_" + path, new_path);
      return new_path;
    },
    make_relative_route: function(path) {
      var new_path;
      if (!clientcookies.get("c_html5mode")) {
        new_path = "#/" + path;
      } else {
        new_path = "/" + path;
      }
      new_path = new_path.replace(new RegExp("//", "g"), "/");
      return new_path;
    },
    force_change_route: function($location, path) {
      var safe_path;
      path = utils.stripTrailingSlash(path);
      safe_path = this.make_route(path);
      if (typeof cvar !== "undefined" && cvar !== null) {
        if (path.indexOf("docs/") > 0) {
          if (path.indexOf("add") === -1) {
            memory.set("g_last_path", path);
          }
        }
      }
      if ($location.path() === safe_path) {
        document.location = safe_path;
      }
      return $location.path(safe_path);
    },
    change_route: function($location, path) {
      var safe_path;
      path = utils.stripTrailingSlash(path);
      safe_path = this.make_route(path);
      if (typeof cvar !== "undefined" && cvar !== null) {
        if (path.indexOf("docs/") > 0) {
          if (path.indexOf("add") === -1) {
            memory.set("g_last_path", path);
          }
        }
      }
      if ($location.path() !== safe_path) {
        return $location.path(safe_path);
      }
    },
    change_document_location: function(path) {
      var cryptobox_slug_path, safe_path;
      path = utils.stripTrailingSlash(path);
      safe_path = this.make_route(path);
      cryptobox_slug_path = "/" + utils.get_cryptobox_slug();
      if (clientcookies.get("c_html5mode")) {
        if (String(document.location).indexOf(safe_path) < 0) {
          return document.location = safe_path;
        }
      } else {
        if (String(document.location).indexOf(cryptobox_slug_path + "#" + safe_path) < 0) {
          return document.location = cryptobox_slug_path + "#" + safe_path;
        }
      }
    },
    safe: function(parameter) {
      return _safe(parameter);
    },
    command: function(msg, command) {
      " format a command url ";
      var url;
      url = "/" + utils.get_cryptobox_slug() + "/" + command + "/" + get_local_time();
      return url;
    },
    postcommand: function(msg, command, operation) {
      " format a command url ";
      var url;
      url = "/" + utils.get_cryptobox_slug() + "/" + command + "/" + get_local_time();
      return url;
    },
    key_value: function(command, key, value) {
      " format a command url ";
      var cryptobox_slug, url;
      get_local_time();
      cryptobox_slug = utils.get_cryptobox_slug();
      if ((cryptobox_slug == null) || cryptobox_slug === "undefined") {
        print("app_basic.cf:2031", "cryptobox slug == undefined");
      }
      url = "/" + cryptobox_slug + "/" + command + "/" + _safe(key) + "/" + _safe(value) + "/" + get_local_time();
      print("app_basic.cf:2034", "urls.key_value", url);
      return url;
    },
    logout: function(http) {
      var login_message, msg_log;
      print("app_basic.cf:2038", "logout");
      login_message = clientcookies.get("c_login_message");
      memory.reset();
      clientcookies.reset();
      if (utils.exist(login_message)) {
        clientcookies.set("c_login_message", login_message);
      }
      if (running_local()) {
        msg_log = function() {
          print("app_basic.cf:2047", "on the server you would be logged off now");
          if (String(document.location).indexOf("login") < 0) {
            return utils.set_time_out(msg_log, 1000);
          }
        };
        return msg_log();
      }
    }
  };
});

/*
//@ sourceMappingURL=app_basic.map
*/
