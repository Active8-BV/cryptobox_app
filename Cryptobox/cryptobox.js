// Generated by CoffeeScript 1.6.3
var child_process, cryptobox_ctrl, gui, path, print, xmlrpc,
  __slice = [].slice;

child_process = require("child_process");

path = require("path");

gui = require('nw.gui');

xmlrpc = require('xmlrpc');

gui = require("nw.gui");

print = function() {
  var len_others, msg, others;
  msg = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  len_others = _.size(others);
  switch (len_others) {
    case 0:
      return typeof console !== "undefined" && console !== null ? console.log(msg) : void 0;
    case 1:
      return typeof console !== "undefined" && console !== null ? console.log(msg + " " + others[0]) : void 0;
    case 2:
      return typeof console !== "undefined" && console !== null ? console.log(msg + " " + others[0] + " " + others[1]) : void 0;
    case 3:
      return typeof console !== "undefined" && console !== null ? console.log(msg + " " + others[0] + " " + others[1] + " " + others[2]) : void 0;
    case 4:
      return typeof console !== "undefined" && console !== null ? console.log(msg + " " + others[0] + " " + others[1] + " " + others[2] + " " + others[3]) : void 0;
    case 5:
      return typeof console !== "undefined" && console !== null ? console.log(msg + " " + others[0] + " " + others[1] + " " + others[2] + " " + others[3] + " " + others[4]) : void 0;
    default:
      return typeof console !== "undefined" && console !== null ? console.log(others, msg) : void 0;
  }
};

angular.module("cryptoboxApp", ["cryptoboxApp.base", "angularFileUpload"]);

cryptobox_ctrl = function($scope, $q, memory, utils) {
  var actions, add_checkbox_menu_item, add_menu_item, add_menu_seperator, add_output, cba_main, clear_msg_buffer, closewin, cmd_to_run, get_progress, get_rpc_client, get_user_var, get_val, lock_buttons, menubar, output, ping_client, progress_bar, progress_bar_item, reset_file_progress, reset_progress, run_command, set_data_user_config, set_data_user_config_once, set_output_buffers, set_user_var_scope, set_val, settings_menu, spawn, start_interval, start_process, start_process_once, store_user_var, tray, traymenu, update_output, winmain,
    _this = this;
  print("cryptobox.cf:28", "cryptobox_ctrl");
  get_rpc_client = function() {
    var clientOptions;
    clientOptions = {
      host: "localhost",
      port: 8654,
      path: "/RPC2"
    };
    return xmlrpc.createClient(clientOptions);
  };
  set_val = function(k, v) {
    var client, p;
    p = $q.defer();
    client = get_rpc_client();
    client.methodCall("set_val", [k, v], function(error, value) {
      if (exist(error)) {
        p.reject(error);
      } else {
        if (utils.exist_truth(value)) {
          p.resolve("set_val " + k + ":" + v);
          utils.force_digest($scope);
        } else {
          p.reject("error set_val");
          utils.force_digest($scope);
        }
      }
      return utils.force_digest($scope);
    });
    return p.promise;
  };
  get_val = function(k) {
    var client, p;
    p = $q.defer();
    client = get_rpc_client();
    client.methodCall("get_val", [k], function(error, value) {
      if (exist(error)) {
        p.reject(error);
        return utils.force_digest($scope);
      } else {
        p.resolve(value);
        return utils.force_digest($scope);
      }
    });
    return p.promise;
  };
  $scope.cba_version = 0.1;
  memory.set("g_running", true);
  cba_main = null;
  $scope.on_exit = function() {
    var client;
    print("cryptobox.cf:72", "cryptobox app on_exit");
    client = get_rpc_client();
    return client.methodCall("force_stop", [], function(e, v) {
      var force_kill,
        _this = this;
      print("cryptobox.cf:75", "force_stop", e, v);
      force_kill = function() {
        if (cba_main != null) {
          if (cba_main.pid != null) {
            print("cryptobox.cf:80", "force kill!!!");
            process.kill(cba_main.pid);
          }
        }
        return gui.App.quit();
      };
      return _.defer(force_kill);
    });
  };
  set_output_buffers = function(cba_main_proc) {
    if (exist(cba_main_proc.stdout)) {
      cba_main_proc.stdout.on("data", function(data) {
        return add_output("stdout:" + data);
      });
    }
    if (exist(cba_main_proc.stderr)) {
      return cba_main_proc.stderr.on("data", function(data) {
        return add_output("stderr:" + data);
      });
    }
  };
  winmain = gui.Window.get();
  winmain.on('close', $scope.on_exit);
  spawn = require("child_process").spawn;
  cmd_to_run = path.join(process.cwd(), "commands");
  cmd_to_run = path.join(cmd_to_run, "cba_main");
  output = [];
  clear_msg_buffer = function() {
    output = [];
    return utils.force_digest($scope);
  };
  $scope.debug_btn = function() {
    clear_msg_buffer();
    return require('nw.gui').Window.get().showDevTools();
  };
  update_output = function() {
    var make_stream, msgs;
    msgs = "";
    make_stream = function(msg) {
      return msgs += msg + "\n";
    };
    _.each(output, make_stream);
    $scope.cmd_output = msgs;
    return utils.force_digest($scope);
  };
  utils.set_interval("cryptobox.cf:121", update_output, 100, "update_output");
  add_output = function(msgs) {
    var add_msg;
    add_msg = function(msg) {
      if (msg.indexOf != null) {
        if (msg.indexOf("Error") === -1) {
          if (msg.indexOf("POST /RPC2") > 0) {
            return;
          }
        }
      }
      if (msg.replace != null) {
        msg = msg.replace("stderr:", "");
        msg.replace("\n", "");
        msg = msg.trim();
      }
      if (utils.exist(msg)) {
        return output.unshift(utils.format_time(utils.get_local_time()) + ": " + msg);
      }
    };
    if ((msgs != null ? msgs.split : void 0) != null) {
      _.each(msgs.split("\n"), add_msg);
    } else if (msgs === "true") {
      pass;
    } else if (msgs === "false") {
      pass;
    } else if (msgs === true) {
      pass;
    } else if (msgs === false) {
      pass;
    } else {
      if (msgs != null) {
        output.push(utils.format_time(utils.get_local_time()) + ": " + msgs);
      }
    }
    return update_output();
  };
  ping_client = function() {
    var client;
    utils.force_digest($scope);
    client = get_rpc_client();
    return client.methodCall("last_ping", [], function(error, value) {
      if (utils.exist(error)) {
        cba_main = spawn(cmd_to_run, [""]);
        return set_output_buffers(cba_main);
      }
    });
  };
  start_interval = function() {
    return utils.set_interval("cryptobox.cf:162", ping_client, 5000, "ping_client");
  };
  utils.set_time_out("cryptobox.cf:164", start_interval, 1000);
  start_process = function() {
    var client;
    print("cryptobox.cf:167", "start_process");
    client = get_rpc_client();
    return client.methodCall("force_stop", [], function(e, v) {
      if (utils.exist(v)) {
        print("cryptobox.cf:171", "killed existing deamon");
      } else {
        print("cryptobox.cf:173", "starting deamon");
      }
      cba_main = spawn(cmd_to_run, [""]);
      return set_output_buffers(cba_main);
    });
  };
  start_process_once = _.once(start_process);
  print("cryptobox.cf:178", cmd_to_run);
  start_process_once();
  progress_bar = 0;
  progress_bar_item = 0;
  $scope.get_progress_item_show = function() {
    return progress_bar_item !== 0;
  };
  $scope.get_progress_item = function() {
    return {
      width: progress_bar_item + "%"
    };
  };
  $scope.get_progress = function() {
    return {
      width: progress_bar + "%"
    };
  };
  reset_progress = function() {
    var client;
    client = get_rpc_client();
    return client.methodCall("reset_progress", [], function(e, v) {
      if (utils.exist(e)) {
        return print("cryptobox.cf:198", e);
      }
    });
  };
  reset_file_progress = function() {
    var client;
    client = get_rpc_client();
    return client.methodCall("reset_file_progress", [], function(e, v) {
      if (utils.exist(e)) {
        return print("cryptobox.cf:204", e);
      }
    });
  };
  lock_buttons = false;
  $scope.lock_buttons = function() {
    if (parseInt(progress_bar, 10) === 0) {
      lock_buttons = false;
    }
    if (lock_buttons) {
      return true;
    } else {
      if (parseInt(progress_bar, 10) === 0) {
        return false;
      } else {
        return true;
      }
    }
  };
  get_progress = function() {
    var client;
    client = get_rpc_client();
    client.methodCall("get_progress", [], function(e, v) {
      var file_progress, progress;
      if (utils.exist(e)) {
        print("cryptobox.cf:224", e, v);
      } else {
        progress = parseInt(v[0], 10);
        file_progress = parseInt(v[1], 10);
      }
      progress_bar = progress;
      progress_bar_item = file_progress;
      if (progress_bar >= 100) {
        _.defer(reset_progress);
      }
      if (progress_bar_item >= 100) {
        return _.defer(reset_file_progress);
      }
    });
    return utils.force_digest($scope);
  };
  utils.set_interval("cryptobox.cf:240", get_progress, 1000, "get_progress");
  store_user_var = function(k, v) {
    var db, p, record;
    p = $q.defer();
    db = new PouchDB('cb_userinfo');
    if (!exist(db)) {
      p.reject("no db");
    } else {
      record = {
        _id: k,
        value: v
      };
      db.get(k, function(e, d) {
        if (exist(d)) {
          if (exist(d._rev)) {
            record._rev = d._rev;
          }
        }
        return db.put(record, function(e, r) {
          if (exist(e)) {
            p.reject(e);
            utils.force_digest($scope);
          }
          if (exist(r)) {
            if (exist_truth(r.ok)) {
              p.resolve(true);
              return utils.force_digest($scope);
            } else {
              p.reject(r);
              return utils.force_digest($scope);
            }
          } else {
            p.reject("store_user_var generic error");
            return utils.force_digest($scope);
          }
        });
      });
    }
    return p.promise;
  };
  get_user_var = function(k) {
    var db, p;
    p = $q.defer();
    db = new PouchDB('cb_userinfo');
    if (!exist(db)) {
      p.reject("no db");
    } else {
      db.get(k, function(e, d) {
        if (exist(e)) {
          return p.reject(e);
        } else {
          if (exist(d)) {
            p.resolve(d.value);
            return utils.force_digest($scope);
          } else {
            return p.reject();
          }
        }
      });
    }
    return p.promise;
  };
  set_user_var_scope = function(name, scope_name) {
    return get_user_var(name).then(function(v) {
      if (exist(scope_name)) {
        return $scope[scope_name] = v;
      } else {
        return $scope[name] = v;
      }
    }, function(err) {
      return print("cryptobox.cf:304", err);
    });
  };
  $scope.show_settings = false;
  $scope.show_debug = false;
  $scope.toggle_debug = function() {
    $scope.show_debug = !$scope.show_debug;
    return $scope.form_change();
  };
  set_data_user_config = function() {
    set_user_var_scope("cb_folder", "cb_folder_text");
    set_user_var_scope("cb_username");
    set_user_var_scope("cb_password");
    set_user_var_scope("cb_name");
    set_user_var_scope("cb_server");
    set_user_var_scope("show_settings");
    set_user_var_scope("show_debug");
    if (!utils.exist($scope.cb_username)) {
      $scope.show_settings = true;
    }
    if (!utils.exist($scope.cb_server)) {
      return $scope.cb_server = "http://127.0.0.1:8000/";
    }
  };
  set_data_user_config_once = _.once(set_data_user_config);
  set_data_user_config_once();
  $scope.$on("$includeContentLoaded", function(event) {
    return typeof console !== "undefined" && console !== null ? console.log(event) : void 0;
  });
  $scope.form_change = function() {
    var p_cb_folder, p_cb_name, p_cb_password, p_cb_server, p_cb_username, p_show_debug, p_show_settings;
    p_cb_folder = store_user_var("cb_folder", $scope.cb_folder_text);
    p_cb_username = store_user_var("cb_username", $scope.cb_username);
    p_cb_password = store_user_var("cb_password", $scope.cb_password);
    p_cb_name = store_user_var("cb_name", $scope.cb_name);
    p_cb_server = store_user_var("cb_server", $scope.cb_server);
    p_show_settings = store_user_var("show_settings", $scope.show_settings);
    p_show_debug = store_user_var("show_debug", $scope.show_debug);
    return $q.all([p_cb_folder, p_cb_username, p_cb_password, p_cb_name, p_cb_server, p_show_settings, p_show_debug]).then(function() {
      return utils.force_digest($scope);
    }, function(err) {
      return print("cryptobox.cf:349", err);
    });
  };
  $scope.file_input_change = function(f) {
    $scope.cb_folder_text = f[0].path;
    return $scope.form_change();
  };
  run_command = function(command_name, command_arguments) {
    var client, p;
    client = get_rpc_client();
    p = $q.defer();
    print("cryptobox.cf:359", "run_command", cmd_to_run);
    client.methodCall(command_name, command_arguments, function(error, value) {
      if (exist(error)) {
        p.reject(error);
        return utils.force_digest($scope);
      } else {
        p.resolve(value);
        return utils.force_digest($scope);
      }
    });
    return p.promise;
  };
  $scope.sync_btn = function() {
    var option;
    clear_msg_buffer();
    add_output("syncing data");
    option = {
      dir: $scope.cb_folder_text,
      username: $scope.cb_username,
      password: $scope.cb_password,
      cryptobox: $scope.cb_name,
      server: $scope.cb_server,
      encrypt: true,
      clear: "0",
      sync: "1"
    };
    return run_command("cryptobox_command", [option]).then(function(res) {
      if (!utils.exist_truth(res)) {
        return add_output(res);
      } else {
        return add_output("done syncing");
      }
    }, function(err) {
      return add_output(err);
    });
  };
  $scope.check_btn = function() {
    var option;
    lock_buttons = true;
    clear_msg_buffer();
    add_output("checking changes");
    option = {
      dir: $scope.cb_folder_text,
      username: $scope.cb_username,
      password: $scope.cb_password,
      cryptobox: $scope.cb_name,
      server: $scope.cb_server,
      check: "1"
    };
    return run_command("cryptobox_command", [option]).then(function(res) {
      add_output(res);
      return add_output("check done");
    }, function(err) {
      return add_output(err);
    });
  };
  $scope.encrypt_btn = function() {
    var option;
    clear_msg_buffer();
    add_output("sync encrypt remove data");
    option = {
      dir: $scope.cb_folder_text,
      username: $scope.cb_username,
      password: $scope.cb_password,
      cryptobox: $scope.cb_name,
      server: $scope.cb_server,
      encrypt: true,
      remove: true,
      sync: false
    };
    return run_command("cryptobox_command", [option]).then(function(res) {
      add_output(res);
      return add_output("done encrypting");
    }, function(err) {
      return add_output(err);
    });
  };
  $scope.decrypt_btn = function() {
    var option;
    clear_msg_buffer();
    add_output("decrypt local data");
    option = {
      dir: $scope.cb_folder_text,
      username: $scope.cb_username,
      password: $scope.cb_password,
      cryptobox: $scope.cb_name,
      server: $scope.cb_server,
      decrypt: true,
      clear: false
    };
    return run_command("cryptobox_command", [option]).then(function(res) {
      add_output(res);
      return add_output("done decrypting");
    }, function(err) {
      return add_output(err);
    });
  };
  $scope.open_website = function() {
    return gui.Shell.openExternal($scope.cb_server + $scope.cb_name);
  };
  traymenu = new gui.Menu();
  menubar = new gui.Menu({
    type: 'menubar'
  });
  tray = new gui.Tray({
    icon: "images/icon-client-signed-in-idle.png"
  });
  menubar = new gui.Menu({
    type: "menubar"
  });
  actions = new gui.Menu();
  add_menu_item = function(label, icon, method) {
    var menubaritem, trayitem;
    trayitem = new gui.MenuItem({
      type: "normal",
      label: label,
      icon: icon,
      click: method
    });
    traymenu.append(trayitem);
    menubaritem = new gui.MenuItem({
      type: "normal",
      label: label,
      icon: icon,
      click: method
    });
    actions.append(menubaritem);
    return menubaritem;
  };
  add_checkbox_menu_item = function(label, icon, method, enabled) {
    var menubaritem, trayitem;
    trayitem = new gui.MenuItem({
      type: "normal",
      label: label,
      icon: icon,
      click: method,
      checked: enabled
    });
    traymenu.append(trayitem);
    menubaritem = new gui.MenuItem({
      type: "checkbox",
      label: label,
      icon: icon,
      click: method,
      checked: enabled
    });
    actions.append(menubaritem);
    return menubaritem;
  };
  add_menu_seperator = function() {
    var menubaritem, trayitem;
    trayitem = new gui.MenuItem({
      type: "separator"
    });
    traymenu.append(trayitem);
    menubaritem = new gui.MenuItem({
      type: "separator"
    });
    return actions.append(menubaritem);
  };
  closewin = function() {
    return winmain.close();
  };
  $scope.toggle_settings = function() {
    $scope.show_settings = !$scope.show_settings;
    return $scope.form_change();
  };
  settings_menu = add_checkbox_menu_item("Settings", "images/cog.png", $scope.toggle_settings, $scope.show_settings);
  add_menu_seperator();
  add_menu_item("Encrypt local", "images/lock.png", closewin);
  winmain.menu = menubar;
  winmain.menu.insert(new gui.MenuItem({
    label: 'Actions',
    submenu: actions
  }), 1);
  return tray.menu = traymenu;
};
