// Generated by CoffeeScript 1.6.3
var child_process, cryptobox_ctrl, gui, path, winmain;

child_process = require("child_process");

path = require("path");

gui = require('nw.gui');

winmain = gui.Window.get();

angular.module("cryptoboxApp", ["cryptoboxApp.base"]);

cryptobox_ctrl = function($scope, $q, memory, utils) {
  var run_command,
    _this = this;
  memory.set("g_running", true);
  $scope.on_exit = function() {
    var killprocess, quit;
    killprocess = function(child) {
      console.error("cryptobox.cf:19", "killing" + memory.get(child));
      return process.kill(memory.get(child));
    };
    _.each(memory.all_prefix("g_process"), killprocess);
    quit = function() {
      return gui.App.quit();
    };
    return _.defer(quit);
  };
  winmain.on('close', $scope.on_exit);
  run_command = function(cmd_name) {
    var child, cmd_to_run, memory_name, p, process_result,
      _this = this;
    memory_name = "g_process_" + utils.slugify(cmd_name);
    if (memory.has(memory_name)) {
      return;
    }
    print("cryptobox.cf:35", cmd_name);
    cmd_to_run = path.join(process.cwd(), "commands");
    cmd_to_run = path.join(cmd_to_run, cmd_name);
    p = $q.defer();
    process_result = function(error, stdout, stderr) {
      if (utils.exist(stderr)) {
        print("cryptobox.cf:42", stderr);
      }
      if (utils.exist(error)) {
        console.error("cryptobox.cf:25", stderr);
        p.reject(error);
      } else {
        p.resolve(stdout);
      }
      memory.del(memory_name);
      return utils.force_digest($scope);
    };
    child = child_process.exec(cmd_to_run, process_result);
    memory.set(memory_name, child.pid);
    return p.promise;
  };
  $scope.python_version = run_command("pyversion");
  $scope.handle_change = function() {
    return $scope.yourName = handle($scope.yourName);
  };
  $scope.file_input_change = function() {
    return py_file_input_change($scope.file_input);
  };
  return $scope.run_commands = function() {
    return $scope.python_version = run_command("pyversion");
  };
};
