// Generated by CoffeeScript 1.6.3
var child_process, cryptobox_ctrl, gui, path, print, winmain, xmlrpc,
  __slice = [].slice;

child_process = require("child_process");

path = require("path");

gui = require('nw.gui');

xmlrpc = require('xmlrpc');

winmain = gui.Window.get();

print = function() {
  var msg, others;
  msg = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  switch (_.size(others)) {
    case 0:
      return typeof console !== "undefined" && console !== null ? console.log(msg) : void 0;
    case 1:
      return typeof console !== "undefined" && console !== null ? console.log(msg + " " + others[0]) : void 0;
    case 2:
      return typeof console !== "undefined" && console !== null ? console.log(msg + " " + others[0] + " " + others[1]) : void 0;
    case 3:
      return typeof console !== "undefined" && console !== null ? console.log(msg + " " + others[0] + " " + others[1] + " " + others[2]) : void 0;
    case 4:
      return typeof console !== "undefined" && console !== null ? console.log(msg + " " + others[0] + " " + others[1] + " " + others[2] + " " + others[3]) : void 0;
    case 5:
      return typeof console !== "undefined" && console !== null ? console.log(msg + " " + others[0] + " " + others[1] + " " + others[2] + " " + others[3] + " " + others[4]) : void 0;
    default:
      return typeof console !== "undefined" && console !== null ? console.log(others, msg) : void 0;
  }
};

angular.module("cryptoboxApp", ["cryptoboxApp.base"]);

cryptobox_ctrl = function($scope, $q, memory, utils) {
  var cba_commander, run_command, spawn,
    _this = this;
  memory.set("g_running", true);
  $scope.on_exit = function() {
    var killprocess, quit;
    killprocess = function(child) {
      console.error("cryptobox.cf:19", "killing" + memory.get(child));
      return process.kill(memory.get(child));
    };
    _.each(memory.all_prefix("g_process"), killprocess);
    quit = function() {
      return gui.App.quit();
    };
    return _.defer(quit);
  };
  winmain.on('close', $scope.on_exit);
  run_command = function(cmd_name) {
    var child, cmd_to_run, memory_name, p, process_result,
      _this = this;
    memory_name = "g_process_" + utils.slugify(cmd_name);
    if (memory.has(memory_name)) {
      return;
    }
    cmd_to_run = path.join(process.cwd(), "commands");
    cmd_to_run = path.join(cmd_to_run, cmd_name);
    print("cryptobox.cf:57", cmd_to_run);
    p = $q.defer();
    process_result = function(error, stdout, stderr) {
      if (utils.exist(stderr)) {
        console.error(console.error);
      }
      if (utils.exist(error)) {
        console.error("cryptobox.cf:25", stderr);
        p.reject(error);
      } else {
        p.resolve(stdout);
      }
      memory.del(memory_name);
      return utils.force_digest($scope);
    };
    child = child_process.exec(cmd_to_run, process_result);
    memory.set(memory_name, child.pid);
    return p.promise;
  };
  spawn = require("child_process").spawn;
  cba_commander = spawn("/Users/rabshakeh/workspace/cryptobox/cryptobox_app/Cryptobox/commands/cba_commander", [""]);
  cba_commander.stdout.on("data", function(data) {
    return print("cryptobox.cf:83", data);
  });
  cba_commander.stderr.on("data", function(data) {
    return print("cryptobox.cf:86", data);
  });
  $scope.handle_change = function() {
    return $scope.yourName = handle($scope.yourName);
  };
  $scope.file_input_change = function() {
    return py_file_input_change($scope.file_input);
  };
  return $scope.run_commands = function() {
    var client, clientOptions;
    clientOptions = {
      host: "localhost",
      port: 8654,
      path: "/RPC2"
    };
    client = xmlrpc.createClient(clientOptions);
    return client.methodCall("add", [2, 4], function(error, value) {
      $scope.python_version = value;
      return utils.force_digest($scope);
    });
  };
};
